//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Player/InputController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputController: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputController"",
    ""maps"": [
        {
            ""name"": ""PlayerMove"",
            ""id"": ""d4e45fc0-e886-43b4-bcc4-bed4a6b6ad2a"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""eec924ff-89a1-47ab-a27b-3986f33050ff"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sprinting"",
                    ""type"": ""PassThrough"",
                    ""id"": ""050c8da7-7756-487e-aa96-e4beb68ae32f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold(duration=0.5)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Walk"",
                    ""type"": ""Button"",
                    ""id"": ""a9d6aee9-f56e-408f-9ba4-c476c7c19314"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dodge"",
                    ""type"": ""Button"",
                    ""id"": ""b722383c-1cb4-4996-aee8-37f62fc8a56b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap(pressPoint=0.2)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""c7a16f11-a592-4bfb-8867-3e4f60ee0481"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap(pressPoint=0.2)"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""87ec19c4-e315-4ea5-b534-138059ac36dd"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""38ffb289-de9a-4d7b-ba81-518cb64c38b7"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""e0c2560b-1808-47eb-b8ad-8d89b95b0e67"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""63dc8c42-5acf-4cca-982c-17e0281b50ca"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""1d0e8405-7649-4d0e-af15-6c76fbd5e495"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""3a10944a-bb4c-45dd-af85-9fd9056c5424"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprinting"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0a3a1138-0216-4ad3-ac33-1e195fbee107"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2a54ef45-7781-41da-8185-3b01f5bdfcbd"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dodge"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3bbb708e-1828-4ab9-8a07-ffedaf97451e"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""CameraMove"",
            ""id"": ""1c5ebe6d-3c59-4949-9a61-2af64f6ceefa"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""db051b54-a899-476d-8194-f431cbf905bb"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f6bd0557-0733-4c7d-b5b7-ed0428db67eb"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerDebug"",
            ""id"": ""0181ac43-a78c-4cd5-b566-3b40ce4e1eee"",
            ""actions"": [
                {
                    ""name"": ""ToTheWall"",
                    ""type"": ""Button"",
                    ""id"": ""195c1113-f15e-471c-9117-e27280357a8b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""injured"",
                    ""type"": ""Button"",
                    ""id"": ""6acc4a1e-623e-4648-b0d2-d161475f1a72"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3213d20e-37e6-4bb2-a0f6-0c4feb2df45e"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToTheWall"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c5989dda-9c2f-4a5b-9031-c01d371b8dd0"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""injured"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Toggle"",
            ""id"": ""bd6c0d35-a1ee-4ab8-9128-47a04a0ffda3"",
            ""actions"": [
                {
                    ""name"": ""EuqipRifle"",
                    ""type"": ""Button"",
                    ""id"": ""9905e6ba-2437-4236-a196-72510a758ff0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""917bdbd5-4a81-40f0-92d6-bee8d38656d3"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EuqipRifle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerMove
        m_PlayerMove = asset.FindActionMap("PlayerMove", throwIfNotFound: true);
        m_PlayerMove_Move = m_PlayerMove.FindAction("Move", throwIfNotFound: true);
        m_PlayerMove_Sprinting = m_PlayerMove.FindAction("Sprinting", throwIfNotFound: true);
        m_PlayerMove_Walk = m_PlayerMove.FindAction("Walk", throwIfNotFound: true);
        m_PlayerMove_Dodge = m_PlayerMove.FindAction("Dodge", throwIfNotFound: true);
        m_PlayerMove_Jump = m_PlayerMove.FindAction("Jump", throwIfNotFound: true);
        // CameraMove
        m_CameraMove = asset.FindActionMap("CameraMove", throwIfNotFound: true);
        m_CameraMove_Move = m_CameraMove.FindAction("Move", throwIfNotFound: true);
        // PlayerDebug
        m_PlayerDebug = asset.FindActionMap("PlayerDebug", throwIfNotFound: true);
        m_PlayerDebug_ToTheWall = m_PlayerDebug.FindAction("ToTheWall", throwIfNotFound: true);
        m_PlayerDebug_injured = m_PlayerDebug.FindAction("injured", throwIfNotFound: true);
        // Toggle
        m_Toggle = asset.FindActionMap("Toggle", throwIfNotFound: true);
        m_Toggle_EuqipRifle = m_Toggle.FindAction("EuqipRifle", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerMove
    private readonly InputActionMap m_PlayerMove;
    private List<IPlayerMoveActions> m_PlayerMoveActionsCallbackInterfaces = new List<IPlayerMoveActions>();
    private readonly InputAction m_PlayerMove_Move;
    private readonly InputAction m_PlayerMove_Sprinting;
    private readonly InputAction m_PlayerMove_Walk;
    private readonly InputAction m_PlayerMove_Dodge;
    private readonly InputAction m_PlayerMove_Jump;
    public struct PlayerMoveActions
    {
        private @InputController m_Wrapper;
        public PlayerMoveActions(@InputController wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_PlayerMove_Move;
        public InputAction @Sprinting => m_Wrapper.m_PlayerMove_Sprinting;
        public InputAction @Walk => m_Wrapper.m_PlayerMove_Walk;
        public InputAction @Dodge => m_Wrapper.m_PlayerMove_Dodge;
        public InputAction @Jump => m_Wrapper.m_PlayerMove_Jump;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMove; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMoveActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerMoveActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerMoveActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerMoveActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Sprinting.started += instance.OnSprinting;
            @Sprinting.performed += instance.OnSprinting;
            @Sprinting.canceled += instance.OnSprinting;
            @Walk.started += instance.OnWalk;
            @Walk.performed += instance.OnWalk;
            @Walk.canceled += instance.OnWalk;
            @Dodge.started += instance.OnDodge;
            @Dodge.performed += instance.OnDodge;
            @Dodge.canceled += instance.OnDodge;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
        }

        private void UnregisterCallbacks(IPlayerMoveActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Sprinting.started -= instance.OnSprinting;
            @Sprinting.performed -= instance.OnSprinting;
            @Sprinting.canceled -= instance.OnSprinting;
            @Walk.started -= instance.OnWalk;
            @Walk.performed -= instance.OnWalk;
            @Walk.canceled -= instance.OnWalk;
            @Dodge.started -= instance.OnDodge;
            @Dodge.performed -= instance.OnDodge;
            @Dodge.canceled -= instance.OnDodge;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
        }

        public void RemoveCallbacks(IPlayerMoveActions instance)
        {
            if (m_Wrapper.m_PlayerMoveActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerMoveActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerMoveActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerMoveActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerMoveActions @PlayerMove => new PlayerMoveActions(this);

    // CameraMove
    private readonly InputActionMap m_CameraMove;
    private List<ICameraMoveActions> m_CameraMoveActionsCallbackInterfaces = new List<ICameraMoveActions>();
    private readonly InputAction m_CameraMove_Move;
    public struct CameraMoveActions
    {
        private @InputController m_Wrapper;
        public CameraMoveActions(@InputController wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_CameraMove_Move;
        public InputActionMap Get() { return m_Wrapper.m_CameraMove; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraMoveActions set) { return set.Get(); }
        public void AddCallbacks(ICameraMoveActions instance)
        {
            if (instance == null || m_Wrapper.m_CameraMoveActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CameraMoveActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
        }

        private void UnregisterCallbacks(ICameraMoveActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
        }

        public void RemoveCallbacks(ICameraMoveActions instance)
        {
            if (m_Wrapper.m_CameraMoveActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICameraMoveActions instance)
        {
            foreach (var item in m_Wrapper.m_CameraMoveActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CameraMoveActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CameraMoveActions @CameraMove => new CameraMoveActions(this);

    // PlayerDebug
    private readonly InputActionMap m_PlayerDebug;
    private List<IPlayerDebugActions> m_PlayerDebugActionsCallbackInterfaces = new List<IPlayerDebugActions>();
    private readonly InputAction m_PlayerDebug_ToTheWall;
    private readonly InputAction m_PlayerDebug_injured;
    public struct PlayerDebugActions
    {
        private @InputController m_Wrapper;
        public PlayerDebugActions(@InputController wrapper) { m_Wrapper = wrapper; }
        public InputAction @ToTheWall => m_Wrapper.m_PlayerDebug_ToTheWall;
        public InputAction @injured => m_Wrapper.m_PlayerDebug_injured;
        public InputActionMap Get() { return m_Wrapper.m_PlayerDebug; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerDebugActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerDebugActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerDebugActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerDebugActionsCallbackInterfaces.Add(instance);
            @ToTheWall.started += instance.OnToTheWall;
            @ToTheWall.performed += instance.OnToTheWall;
            @ToTheWall.canceled += instance.OnToTheWall;
            @injured.started += instance.OnInjured;
            @injured.performed += instance.OnInjured;
            @injured.canceled += instance.OnInjured;
        }

        private void UnregisterCallbacks(IPlayerDebugActions instance)
        {
            @ToTheWall.started -= instance.OnToTheWall;
            @ToTheWall.performed -= instance.OnToTheWall;
            @ToTheWall.canceled -= instance.OnToTheWall;
            @injured.started -= instance.OnInjured;
            @injured.performed -= instance.OnInjured;
            @injured.canceled -= instance.OnInjured;
        }

        public void RemoveCallbacks(IPlayerDebugActions instance)
        {
            if (m_Wrapper.m_PlayerDebugActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerDebugActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerDebugActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerDebugActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerDebugActions @PlayerDebug => new PlayerDebugActions(this);

    // Toggle
    private readonly InputActionMap m_Toggle;
    private List<IToggleActions> m_ToggleActionsCallbackInterfaces = new List<IToggleActions>();
    private readonly InputAction m_Toggle_EuqipRifle;
    public struct ToggleActions
    {
        private @InputController m_Wrapper;
        public ToggleActions(@InputController wrapper) { m_Wrapper = wrapper; }
        public InputAction @EuqipRifle => m_Wrapper.m_Toggle_EuqipRifle;
        public InputActionMap Get() { return m_Wrapper.m_Toggle; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ToggleActions set) { return set.Get(); }
        public void AddCallbacks(IToggleActions instance)
        {
            if (instance == null || m_Wrapper.m_ToggleActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ToggleActionsCallbackInterfaces.Add(instance);
            @EuqipRifle.started += instance.OnEuqipRifle;
            @EuqipRifle.performed += instance.OnEuqipRifle;
            @EuqipRifle.canceled += instance.OnEuqipRifle;
        }

        private void UnregisterCallbacks(IToggleActions instance)
        {
            @EuqipRifle.started -= instance.OnEuqipRifle;
            @EuqipRifle.performed -= instance.OnEuqipRifle;
            @EuqipRifle.canceled -= instance.OnEuqipRifle;
        }

        public void RemoveCallbacks(IToggleActions instance)
        {
            if (m_Wrapper.m_ToggleActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IToggleActions instance)
        {
            foreach (var item in m_Wrapper.m_ToggleActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ToggleActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ToggleActions @Toggle => new ToggleActions(this);
    public interface IPlayerMoveActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnSprinting(InputAction.CallbackContext context);
        void OnWalk(InputAction.CallbackContext context);
        void OnDodge(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
    public interface ICameraMoveActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
    public interface IPlayerDebugActions
    {
        void OnToTheWall(InputAction.CallbackContext context);
        void OnInjured(InputAction.CallbackContext context);
    }
    public interface IToggleActions
    {
        void OnEuqipRifle(InputAction.CallbackContext context);
    }
}
